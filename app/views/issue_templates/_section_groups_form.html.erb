<%= f.fields_for :section_groups do |group_form| %>
  <%= render partial: "issue_templates/sections/group_form",
             locals: { form: group_form, template: false } %>
<% end %>

<%= f.fields_for :section_groups_attributes, index: "$id_group_section$" do |group_form| %>
  <%= render partial: "issue_templates/sections/group_form",
             locals: { form: group_form, template: true } %>
<% end %>

<script>
    function resetHiddenFields(ul) {
        let sectionElement = ul.closest('.split_description.select')
        resetHiddenTextField(sectionElement)
        resetHiddenPlaceholderField(sectionElement)
        resetEmptyValueField(sectionElement)
        resetHiddenIconField(sectionElement)
    }

    function resetHiddenTextField(sectionElement) {
        let text = $(sectionElement).find('input.text')
        let icon_name = $(sectionElement).find('input.icon_name');

        // Object (passed by reference)
        let icon_object = { values : icon_name.val() }

        let ul = $(sectionElement).find('ul')
        let joined_values = ul.find('li .value').map(function () {
            return $(this).val()
        }).get().join(';')

        let text_object = { values : joined_values }
        removeEmptyElementsValuesFromTwoObjects(text_object, icon_object)
        text.val(text_object.values)
    }

    function resetHiddenPlaceholderField(sectionElement) {
        let placeholder = $(sectionElement).find('input.placeholder')
        let list_of_value = $(sectionElement).find('ul')
        let joined_values = list_of_value.find('li input[type=checkbox][name=checked]:checked').map(function () {
            return $(this).parent().find('.value').val()
        }).get().filter(item => item).join(';')
        placeholder.val(joined_values)
    }

    function resetHiddenIconField(sectionElement) {
        let icon_name = $(sectionElement).find('input.icon_name')
        let text = $(sectionElement).find('input.text')

        // Object (passed by reference)
        let text_object = { values : text.val() }

        let ul = $(sectionElement).find('ul')
        let joined_values = ul.find('li .buttons-icons').map(function () {
            return $(this).val()
        }).get().join(';')

        // Object (passed by reference)
        let icon_object = { values : joined_values }
        removeEmptyElementsValuesFromTwoObjects(icon_object,text_object)
        icon_name.val(icon_object.values)
    }

    function resetEmptyValueField(sectionElement) {
      //let type = $(sectionElement).find('#type')[0]
      let empty_value = $(sectionElement).find('input.empty_value')
      let list_of_value = $(sectionElement).find('ul')
      let joined_values = list_of_value.find('li input[type=checkbox][name=read_only]:checked').map(function () {
        return $(this).parent().find('.value').val()
      }).get().filter(item => item).join(';')
      empty_value.val(joined_values)
    }

    $('form#issue-template-form').on('change', '.possible-values input[type=checkbox][name=checked]', function (event) {
        let section = event.target.closest('.split_description.select')
        resetHiddenPlaceholderField(section)
    })
    $('form#issue-template-form').on('change', '.possible-values input[type=checkbox][name=read_only]', function (event) {
        let section = event.target.closest('.split_description.select')
        resetEmptyValueField(section)
    })
    $('form#issue-template-form').on('click', '.add_possible_value', function (event) {
        event.preventDefault()
        let ul = $(event.target).parent().find('ul')
        ul.append('<%= escape_javascript(render('issue_templates/sections/select_possible_value')) %>')
        toggleFieldAndLinkIconVisibilityOnAddPossibleValue($(this));
    })

    $('form#issue-template-form').on('change', 'select[id*="select_type"][class="select2-hidden-accessible"]', function (event) {
      toggleIconSpanOnChangeType($(this));
    });

    function toggleIconSpanOnChangeType(elem){
      let divParent = elem.parent().parent();
      toggleFieldAndLinkIconVisibility(divParent, elem);
    }

    function toggleFieldAndLinkIconVisibilityOnAddPossibleValue(elem){
      let divParent = elem.parent();
      // Select the neighboring select element of the parent div.which corresponds to the selected type
      let selectType = divParent.prev('p').find('select');
      toggleFieldAndLinkIconVisibility(divParent, selectType);
    }

    function toggleFieldAndLinkIconVisibility(divParent, selectType) {
      if (selectType.val() != "buttons_icons") {
        divParent.find('.span-icons').each(function() {
          $(this).hide();
        });
      } else {
        divParent.find('.span-icons').each(function() {
          $(this).show();
        });
      }
    }

    function updateFieldAndLinkIconVisibilityBasedOnSelectedType(){
      let elements = document.querySelectorAll('div.sections');
      elements.forEach(function( ele) {
      let selectType =  $(ele).find('select[id*="select_type"]');
        toggleIconSpanOnChangeType(selectType );
      });
    }

    $('form#issue-template-form').on('keyup change', '.possible-values input.value, .possible-values input.buttons-icons', function (event) {
        let ul = $(event.target).closest('ul')
        resetHiddenFields(ul)
    })

    $('form#issue-template-form').on('click', '.remove_possible_value', function (event) {
        event.preventDefault()
        let ul = $(event.target).closest('ul')
        $(event.target).parent().remove()
        resetHiddenFields(ul)
    })
    $('form#issue-template-form').on('mouseenter', '.split_description', function () {
        $(this).addClass("hover")
    })
    $('form#issue-template-form').on('mouseleave', '.split_description', function () {
        $(this).removeClass("hover")
    })

    //  Removes empty elements at corresponding indices from the 'values' property of two objects.
    function removeEmptyElementsValuesFromTwoObjects(object1, object2) {
        // Split the values into arrays
        object1.values = object1.values.split(";");
        object2.values = object2.values.split(";");
        // Arrays to store non-empty values
        let newArray1 = [];
        let newArray2 = [];
        // Iterate over the values of the arrays
        for (let i = 0; i < object1.values.length; i++) {
            // Check if the values are not empty, undefined, or null in either object
            if ((object1.values[i] !== "" && object1.values[i] !== undefined && object1.values[i] !== null) ||
                (object2.values[i] !== "" && object2.values[i] !== undefined && object2.values[i] !== null)) {
                // Add non-empty values to the new arrays
                newArray1.push(object1.values[i]);
                newArray2.push(object2.values[i]);
            }
        }
        // Join the non-empty values back into strings and assign them back to the objects
        object1.values = newArray1.join(";");
        object2.values = newArray2.join(";");
    }

    $(document).ready(function() {
      updateFieldAndLinkIconVisibilityBasedOnSelectedType();
    });
    $(document).bind('ajaxStop', updateFieldAndLinkIconVisibilityBasedOnSelectedType);
</script>
