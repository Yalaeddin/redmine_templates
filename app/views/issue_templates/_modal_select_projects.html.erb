<%
  template_projects = @issue_template.template_projects
  allowed_projects = @issue_template.allowed_target_projects.includes(:custom_values)
  custom_fields = ProjectCustomField.includes(:custom_values).where("name IN (?)", Setting["plugin_redmine_templates"]['custom_fields'])

  # list custom_values_by_projects
  values_by_projects = {}
  enumeration_values = CustomFieldEnumeration.all
  allowed_projects.each do |project|
    values_by_projects.merge!(project.id => {})
    custom_fields.each do |custom_field|
      values = custom_field.custom_values.select { |cv| cv.customized_id == project.id }
      values.each do |custom_value|

        # puts "custom_field.inspect : #{custom_field.inspect}"

        if custom_field.field_format == 'enumeration'
          value = enumeration_values.find{|enum_value| enum_value.id == custom_value.value.to_i}.to_s
        else
          value = custom_value.value
        end
        values_by_projects[project.id].merge!(custom_field.id => value) if value.present?
      end
    end
  end

  custom_values = values_by_projects
  options_for_selects = {}
  custom_fields.each do |field|
    options_for_selects.merge!(field.id => [])
  end

  nested_projects_list = render_project_nested_lists(allowed_projects | template_projects) do |project|
    custom_fields_data = {}
    if allowed_projects.include?(project)
      custom_fields.each do |cf|
        values = custom_values[project.id][cf.id]
        if values.present?
          values = [values] if values.kind_of?(String)
          custom_fields_data.merge!(cf.id => values.join('|'))
          values.each do |value|
            options_for_selects[cf.id] << value unless options_for_selects[cf.id].include?(value) || value.blank?
          end
        end
      end
    end
    custom_fields_data.merge!('name' => project.name)
    content_tag('label',
                check_box_tag(
                  'template_project_ids[]',
                  project.id,
                  @issue_template != nil && template_projects.include?(project),
                  disabled: allowed_projects.include?(project) ? false : true,
                  :class => "nested_project_#{project.id} #{"inactive" unless allowed_projects.include?(project)}",
                  data: custom_fields_data
                ) + ' ' + h(project.name), :class => ("inactive" unless allowed_projects.include?(project))
    )
  end
%>

<h3 class="title"><%= l(:field_project).pluralize %> TEMPLATE</h3>

<div data-controller="template-projects-selection">

  <div>

    <div class="actions_links">
      <%= l("button_filter") %> :
      <input data-action="input->template-projects-selection#hide_by_name"/>
    </div>

    <div class="actions_links">
      <%= l("Selection") %> :
      <%= link_to l("select_all"), '#', id: "link_select_all", :data => { :action => 'click->template-projects-selection#select_all' } %>
      |
      <%= link_to l("select_none"), '#', id: "link_select_all", :data => { :action => 'click->template-projects-selection#select_none' } %>
      |
      <%= link_to l("advanced_selection"), '#', id: "link_advanced_selection", :data => { :action => 'click->template-projects-selection#toggle_advanced_selection' } %>

      <div class="advanced_selection hidden" data-target="template-projects-selection.filters">
        <div data-target="template-projects-selection.filter" class="first">
          <%= select_tag 'filter_name',
                         options_for_select(custom_fields.map { |cf| [cf.name, cf.id] }),
                         :prompt => l("select_filter"),
                         :id => "select_filter",
                         :class => "select_box_custom_field_value",
                         :data => {
                           action: 'change->template-projects-selection#select_filter'
                         } %>
          <%= select_tag 'filter_value',
                         '',
                         :id => "select_values",
                         :multiple => true,
                         :data => {
                           action: 'change->template-projects-selection#select_filter_values'
                         } %>
          <%= link_to "(#{l('button_delete')})", '#', class: 'hidden-if-first', data: { action: 'click->template-projects-selection#remove_filter' } %>
        </div>
        <%= link_to "+ #{l('add_a_filter')}", '#', data: { action: 'click->template-projects-selection#add_filter' } %>
      </div>
      <div style="display: none;">
        <% custom_fields.each do |field| %>
          <%= select_tag field.id,
                         options_for_select(options_for_selects[field.id]),
                         :id => "select_#{field.id}",
                         :data => {
                           target: "template-projects-selection.select_for_#{field.id}"
                         }
          %>
        <% end %>
      </div>
    </div>

  </div>

  <div class="projects_container">
    <div class="columns" id="project_nested_list">
      <%= nested_projects_list %>
    </div>
  </div>


  <p>
    <%= l("selected_projects") %>:
    <span id="selection_counter" data-target="template-projects-selection.counter"></span>
    <span style="margin-left: 5px;">
      (<%= link_to l("hide_non_selected_projects"),
                   '#',
                   data: { action: 'click->template-projects-selection#hide_non_selected_projects',
                           target: 'template-projects-selection.hide_projects_button' },
                   style: 'display: inline-block'
    %><%= link_to l("show_all_projects"),
                  '#',
                  data: { action: 'click->template-projects-selection#show_all_projects',
                          target: 'template-projects-selection.show_projects_button' },
                  style: 'display: none'
    %>)
    </span>
  </p>

  <p class="buttons">
    <%= submit_tag l(:button_apply), :name => nil, :onclick => "updateSelectedProjects();hideModal(this);", :type => 'button', :id => 'button_apply_projects' %>
  </p>

</div>

<script type="text/javascript">

    function updateSelectedProjects() {
        $("select#issue_template_template_project_ids option").each(function () {
            this.selected = "";
        });
        var htmlContent = "";
        $("input:checkbox[name='template_project_ids[]']:checked").each(function () {
            $("#issue_template_template_project_ids option[value=" + $(this).val() + "]").prop("selected", true);
        });

        $("input:checkbox[name='template_project_ids[]']:checked:not(.inactive)").each(function () {
            htmlContent += "<span class=\"list_templates_projects_names\">" + $(this).closest('label').text() + "</span>";
        });
        $("#my_projects").html(htmlContent);
        if (htmlContent == "") {
            $(".and_x_other_projects").css("display", "none");
        } else {
            $(".and_x_other_projects").css("display", "inline");
        }
    }

    function select_all() {
        $("input:checkbox[name='template_project_ids[]']").each(function () {
            this.setAttribute("checked", "checked");
            this.checked = true;
        });
    }

    function select_none() {
        $("input:checkbox[name='template_project_ids[]']:checked:not(.inactive)").each(function () {
            $(this).attr("checked", "");
            $(this).removeAttr("checked");
            $(this).checked = false;
        });
    }

    function select_from_custom_field(id) {
        select_none();
        $("input:checkbox[name='template_project_ids[]']:checkbox[data-" + id + "='" + $("#select_" + id).val() + "']").each(function () {
            $(this).attr("checked", "checked");
            this.checked = true;
        });
        $(".select_box_custom_field_value").prop('selectedIndex', 0);
    }

    $('#project_nested_list').on('change', "input:checkbox[name='template_project_ids[]']", function (event) {
        $(event.target).closest('li').find("input:checkbox[name='template_project_ids[]']").prop('checked', $(event.target).is(':checked'));
    })

</script>
